service: ${file(./package.json):name}

frameworkVersion: '3'

custom:
  dynamoDbUsersTableName: 'Users-${self:provider.stage}'
  dynamoDbLinksTableName: 'Links-${self:provider.stage}'
  deactivatedLinksQueueName: 'Deactivated-Links-${self:provider.stage}'
#  globalTables:
#    version: v2
#    regions:
#      - eu-west-1
  scriptable:
    hooks:
      before:package:createDeploymentArtifacts: npm run build
  # configuring authorizer in provider.httpApi doesn't work and there are still open issue
  # should be added after serverless team fix this issue
  authorizer:
    type: request
    name: verifyToken
    resultTtlInSeconds: 0
    identitySource: method.request.header.Authorization

plugins:
  - serverless-dotenv-plugin
  - serverless-create-global-dynamodb-table
  - serverless-scriptable-plugin

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-central-1
  stage: dev
  httpApi:
    cors:
      allowedOrigins: '*'
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - GET
        - POST
        - PATCH
      allowCredentials: true
      exposedResponseHeaders:
        - Special-Response-Header
      maxAge: 6000
  iam:
    role: MyCustomRole
  environment:
    REGION: ${self:provider.region}
    USER_TABLE_NAME: ${self:custom.dynamoDbUsersTableName}
    LINKS_TABLE_NAME: ${self:custom.dynamoDbLinksTableName}
    DEACTIVATED_LINKS_QUEUE_NAME: ${self:custom.deactivatedLinksQueueName}
    DEACTIVATE_FUNC_NAME: ${self:functions.deactivateLinkByCron.name}
    ROLE_NAME: ${file(./src/resources/iam.yml):Resources.MyCustomRole.Properties.RoleName}

package:
  individually: true
  patterns:
    - '!script.mjs'
    - '!src/**'
    - '!Readme.md'

functions:
  verifyToken:
    handler: dist/functions/auth/verify-token.verifyToken
  signUp:
    handler: dist/functions/auth/sign-up.signUp
    events:
      - http:
          path: /sign-up
          method: POST
  signIn:
    handler: dist/functions/auth/sign-in.signIn
    events:
      - http:
          path: /sign-in
          method: POST
  refresh:
    handler: dist/functions/auth/refresh.refresh
    events:
      - http:
          path: /refresh
          method: POST
  deactivateLinkByCron:
    name: deactivateLinkByCron-${self:provider.stage}
    handler: dist/functions/links/deactivate-link-by-cron.deactivateLinkByCron
  generateShortLink:
    handler: dist/functions/links/generate-short-link.generateShortLink
    events:
      - http:
          path: /l/generate
          method: POST
          authorizer: ${self:custom.authorizer}
          cors: true
  deactivateLink:
    handler: dist/functions/links/deactivate-link.deactivateLink
    events:
      - http:
          path: /l/deactivate
          method: PATCH
          authorizer: ${self:custom.authorizer}
          cors: true
  getAllLinks:
    handler: dist/functions/links/get-all-links.getAllLinks
    events:
      - http:
          path: /l/get-all-links
          method: GET
          authorizer: ${self:custom.authorizer}
          cors: true
  redirect:
    handler: dist/functions/links/redirect.redirect
    events:
      - http:
          path: /l/{shortId}
          method: GET
  sendLinkDeactivatedEmail:
    handler: dist/functions/links/send-link-deactivated-email.sendLinkDeactivatedEmail
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - deactivatedLinks
              - Arn
          batchSize: 10
          maximumBatchingWindow: 60
          functionResponseType: ReportBatchItemFailures
  getDocs:
    handler: dist/functions/docs/get-docs.getDocs
    events:
      - http:
          path: /docs
          method: GET
          cors: true
      - http:
          path: /schema.yaml
          method: GET
          cors: true

resources:
  - ${file(./src/resources/dynamoDd.yml)}
  - ${file(./src/resources/sqs.yml)}
  - ${file(./src/resources/iam.yml)}
